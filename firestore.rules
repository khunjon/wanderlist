rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Users can read/write their own documents, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin(); // Admins can read all user documents
    }
    
    // Lists can be read by owner, if they're public (even without auth), or by admins
    match /lists/{listId} {
      allow create: if request.auth != null;
      // Allow reading public lists without authentication for discovery
      // Allow reading own lists when authenticated
      // Allow admins to read all lists
      allow read: if resource.data.isPublic == true || 
                     (request.auth != null && resource.data.userId == request.auth.uid) ||
                     (request.auth != null && isAdmin());
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Places can be read by anyone (they're public data)
    match /places/{placeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // ListPlaces can be read by anyone if the parent list is public
    // Can be written only by the list owner or admins
    match /listPlaces/{listPlaceId} {
      allow create: if request.auth != null;
      // Allow reading if the parent list is public (for discovery)
      // Allow reading/writing if user owns the list
      // Allow admins to read all listPlaces
      allow read: if get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.isPublic == true ||
                     (request.auth != null && get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.userId == request.auth.uid) ||
                     (request.auth != null && isAdmin());
      allow update, delete: if request.auth != null && 
                               (get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.userId == request.auth.uid ||
                                isAdmin());
    }
  }
} 